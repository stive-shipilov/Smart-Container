#include "HX711.h"
#include <ESP8266WiFi.h>
#include <Ticker.h> // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Ticker

String apiKey = "********"; 
const char *ssid = "********"; 
const char *pass = "********";
const char* server = "api.thingspeak.com";

WiFiClient client;
HX711 scale(D5, D6);

const int buttonPin = D3;  // –ü–æ–¥–∫–ª—é—á–∞–µ–º KY-004 –∫ D3 (GPIO0)
volatile bool resetScale = false;  // –§–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

float weight;
float calibration_factor = -425975; 

// –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
Ticker timer;

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
void IRAM_ATTR buttonPress() {
  resetScale = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ThingSpeak
void sendData() {
  // –ß—Ç–µ–Ω–∏–µ –≤–µ—Å–∞
  scale.set_scale(calibration_factor);
  weight = scale.get_units(); 
  
  // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
  Serial.print("Weight: ");
  Serial.print(weight, 8);  // 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  Serial.println(" KG");

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É ThingSpeak
  if (client.connect(server, 80)) {
    String postStr = apiKey;
    postStr += "&field1=";
    postStr += String(weight, 5);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 5 –∑–Ω–∞–∫–æ–≤
    postStr += "\r\n\r\n";

    // HTTP-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    client.print("POST /update HTTP/1.1\n");
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + apiKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);

    Serial.println("üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");

    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    while (client.available()) {
      String line = client.readStringUntil('\n');
      Serial.println(line);
      if (line.startsWith("HTTP/1.1 200 OK")) {
        Serial.println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ ThingSpeak!");
        break;
      }
    }
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ThingSpeak!");
  }
  client.stop();  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
}

void setup() {
  Serial.begin(115200);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—â–∏–º —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–º –∫ 3.3V
  pinMode(buttonPin, INPUT_PULLUP);  // –í–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—â–∏–π —Ä–µ–∑–∏—Å—Ç–æ—Ä
  attachInterrupt(digitalPinToInterrupt(buttonPin), buttonPress, FALLING); // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
  
  scale.set_scale();
  scale.tare();  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Å—ã

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
  timer.attach(15, sendData);  // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
}

void loop() {
  // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Å—ã
  if (resetScale) {  
    scale.set_scale();
    scale.tare();  
    Serial.println("–í–µ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã!");
    resetScale = false;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  }

  // –¶–∏–∫–ª –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–π–º–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
  Serial.println("Waiting...");
  delay(1000);  // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞
}